@isTest
public class TamsOppShowQuotesTest {
	@isTest
	public static void testShowQuotes(){
		Account acct = createAccount();
		Opportunity opp = createOpportunity();
		TAMS_Quotes__c qte1 = createQuote('TEST1',acct.Id,opp.Id);
		TAMS_Quotes__c qte2 = createQuote('TEST2',acct.Id,opp.Id); 
    	Product2 product = createProduct('AQ64/VELOCT/UPG.000','CT');
        PriceBook2 pb = createPriceBook('CT Price Book','CT');
        PriceBookEntry pbe = createPriceBookEntry(product.Id,pb.Id);		
		qte2.Primary__c = true;
		update qte2;
		Test.startTest();
		List<TAMS_Quotes__c> quotes = TamsOppShowQuotes.getQuotes(opp.Id);
		Test.stopTest();
		System.debug('quotes size'+quotes.size());
		System.assert(quotes.size() == 2, 'Not getting all quotes');
	}

	@isTest
	public static void testSetPrimary(){
		Account acct = createAccount();
		Opportunity opp = createOpportunity();
		TAMS_Quotes__c qte1 = createQuote('TEST1',acct.Id,opp.Id);
		TAMS_Quotes__c qte2 = createQuote('TEST2',acct.Id,opp.Id); 
        Product2 product = createProduct('AQ64/VELOCT/UPG.000','CT');
        PriceBook2 pb = createPriceBook('CT SALES SYSTEMS PRICE LIST','CT');
        PriceBookEntry pbe = createPriceBookEntry(product.Id,pb.Id);		
		qte2.Primary__c = true;
		update qte2;
		Test.startTest();
		TamsOppShowQuotes.setPrimary(qte1.Id);
		List<TAMS_Quotes__c> quotes = TamsOppShowQuotes.getQuotes(opp.Id);
		Test.stopTest();
		System.debug('quotes size'+quotes.size());
		System.assert(quotes.size() == 2, 'Not getting all quotes');
		System.assert(quotes[0].Primary__c == true ,'Primary flag not set to true for the expected quote');
		System.assert(quotes[1].Primary__c == false ,'Primary flag for other quotes should set to false');
	}	
	private static Account createAccount(){
		Account acc = new Account(name='Test Account');
        acc.Territory_Name_TAMS__c = 'US.GL.2660100.TR-101';
        insert acc;
        return acc;
	}	

	private static Opportunity createOpportunity(){
        Opportunity op = new Opportunity();
        op.Name='testOpName';
        op.Expected_Bill_Date_TAMS__c     = Date.today() + 2;
        op.CloseDate                      =  Date.today()+1;
        op.StageName                      = 'Closed/Lost';
        op.Lost_Cancelled_Reason_TAMS__c  = 'Functionality/Insufficient Technology';
        op.Competitor_Lost_to_TAMS__c     = 'GE';
        op.LeadSource                     = 'Cold Call';
        op.Incumbent_TAMS__c              = 'GE';
        op.Competitor_Lost_to_TAMS__c     = 'GE';
        op.Is_this_Product_Funded_TAMS__c = 'Yes';
        op.Additional_Comments_TAMS__c    = 'Test Comments';
        op.Actual_Book_Date_TAMS__c       = Date.today();
        insert op;   
        return op;
	}

	private static TAMS_Quotes__c createQuote(String quoteName,Id acctId, Id oppId){
        TAMS_Quotes__c qt = new TAMS_Quotes__c();
        qt.Opportunity_Name__c            = oppId;
        qt.Customer_Name__c               = acctId;
        qt.Modality__c                    = 'CT';
        qt.PBOM__c                        = 'AQ64/VELOCT/UPG.000';
        qt.Quote_Name__c                  = quoteName;
        qt.Quote_Version__c               = '1';
        qt.Status__c                      = 'Quote Generated by HQ';
        qt.Amount__c                      = 4000;
        insert qt;		
        return qt;
	}

	private static Product2 createProduct(String productName, String modality){
		Product2 prd = new Product2();
		prd.name = productName;
		prd.isActive = true;
		insert prd;
		return prd;
	}

	private static PriceBook2 createPriceBook(String pbName, String modality){
		PriceBook2 pb = new PriceBook2();
		pb.id = Test.getStandardPricebookId();
		pb.isActive = true;
		pb.Modality__c = modality;
		
		update pb;
		
		Pricebook2 pb2 = new Pricebook2();
		pb2.IsActive=true;
		pb2.Name = pbName;
		pb2.Modality__c = modality;
		insert pb2;
		return pb;
	}


	private static PriceBookEntry createPriceBookEntry(Id productId,Id PriceBookId){
		PriceBookEntry pbe = new PriceBookEntry();
		pbe.PriceBook2Id = PriceBookId;
		pbe.Product2Id = productId;
		pbe.UnitPrice = 0;
		pbe.UseStandardPrice = false;
		pbe.isActive = true;
		insert pbe;
		return pbe;
	}	
}